add

011111 RT RA RB OE 100001010 Rc
0      6  11 16 21 22        31

    int64_t val = (int64_t)(int32_t)r[RA] + (int64_t)(int32_t)r[RB];
    r[RT] = val;
    if(OE) overflow(val);
    if(Rc) record(0,val);
  
===

addc

011111 RT RA RB OE 000001010 Rc
0      6  11 16 21 22        31

    int64_t sval = (int64_t)(int32_t)r[RA] + (int64_t)(int32_t)r[RB];
    uint64_t val = (uint64_t)r[RA] + (uint64_t)r[RB];
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;
  
===

adde

011111 RT RA RB OE 010001010 Rc
0      6  11 16 21 22        31

    int64_t sval = (int64_t)(int32_t)r[RA] + (int64_t)(int32_t)r[RB] + (CA ? 1 : 0);
    uint64_t val = (uint64_t)r[RA] + (uint64_t)r[RB] + (CA ? 1 : 0);;
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;

===

adde64
011111 RT RA RB OE 110001010 Rc
0      6  11 16 21 22        31

===

addi

00111 S RT RA SI
0     5 6  11 16

    r[RT] = (RA ? r[RA] : 0) + ((int16_t)SI << (S ? 16 : 0));

===

addic

00110 Rc RT RA SI
0     5  6  11 16

    uint64_t val = (uint64_t)r[RA] + (uint32_t)(int16_t)SI;
    r[RT] = val;
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;

===

addme

011111 RT RA 00000 OE 011101010 Rc
0      6  11 16    21 22        31

    int64_t sval = (int64_t)(int32_t)r[RA] + (int64_t)-1 + (CA ? 1 : 0);
    uint64_t val = (uint64_t)r[RA] + 0xFFFFFFFFU + (CA ? 1 : 0);
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;
  
===

addme64

011111 RT RA 00000 OE 111101010 Rc
0      6  11 16    21 22        31

===

addze

011111 RT RA 00000 OE 011001010 Rc
0      6  11 16    21 22        31

    int64_t sval = (int64_t)(int32_t)r[RA] + (CA ? 1 : 0);
    uint64_t val = (uint64_t)r[RA] + (CA ? 1 : 0);
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;
  
===

and

011111 RS RA RB 0000011100 Rc
0      6  11 16 21         31

    uint32_t val = r[RS] & r[RB];
    r[RA] = val;
    if(Rc) record(0,val);

===

andc

011111 RS RA RB 0000111100 Rc
0      6  11 16 21         31

    uint32_t val = r[RS] & ~r[RB];
    r[RA] = val;
    if(Rc) record(0,val);

===

andi

01110 S RS RA UI
0     5 6  11 16

    uint32_t val = r[RS] & (UI << (S ? 16 : 0));
    r[RA] = val;
    record(0, val);

===

b

010010 LI AA LK
0      6  30 31

branch

    if(LK) lr = NIA;
    int32_t val = LI << 2;
    if(val & 0x02000000)
        val |= 0xFC000000;
    NIA = (AA ? 0 : CIA) + val;


===

be
010110 LI AA LK
0      6  30 31

branch

===

bc
010000 BO BI BD AA LK
0      6  11 16 30 31

branch

    if(LK) lr = NIA;
    if(conditional(BO, BI))
        NIA = (AA ? 0 : CIA) + (int16_t) (BD<<2);

===

bce
001001 BO BI BD AA LK
0      6  11 16 30 31

branch

===

bcctr
010011 BO BI 00000 1000010000 LK
0      6  11 16    21         31

branch

    if(LK) lr = NIA;
    if(conditional(BO | 0x4, BI))
        NIA = ctr & ~3;

===

bcctre
010011 BO BI 00000 1000010001 LK
0      6  11 16    21         31

branch

===
bclr

010011 BO BI 00000 0000010000 LK
0      6  11 16    21         31

branch

    if(conditional(BO, BI))
        NIA = lr & ~3;
    if(LK) lr = CIA+4;

===
bclre

010011 BO BI 00000 0000010001 LK
0      6  11 16    21         31

branch

===

cmp

011111 BF 0 L  RA RB 0000000000 0
0      6  9 10 11 16 21         31

    record(BF, r[RA] - r[RB]);

===
cmpi

001011 BF 0 L  RA SI
0      6  9 10 11 16

    record(BF, r[RA] - (int16_t)SI);

===
cmpl

011111 BF 0 L  RA RB 0000100000 0
0      6  9 10 11 16 21         31

    if(r[RA] == r[RB])
        setcr(BF, 2 | SO);
    else if(r[RA] < r[RB])
        setcr(BF, 8 | SO);
    else
        setcr(BF, 4 | SO);

===
cmpli

001010 BF 0 L  RA SI
0      6  9 10 11 16

    if(r[RA] == SI)
        setcr(BF, 2 | SO);
    else if(r[RA] < SI)
        setcr(BF, 8 | SO);
    else
        setcr(BF, 4 | SO);

===
cntlzw

011111 RS RA 00000 0000011010 Rc
0      6  11 16    21         31

    uint32_t val = r[RS] ? __builtin_clz(r[RS]) : 32;
    r[RA] = val;
    if(Rc) record(0,val);

===
cntlzd

011111 RS RA 00000 0000111010 Rc
0      6  11 16    21         31

===
crand

010011 BT BA BB 0100000001 0
0      6  11 16 21         31

    crbit(BT, crbit(BA) && crbit(BB));

===
crandc

010011 BT BA BB 0010000001 0
0      6  11 16 21         31

    crbit(BT, crbit(BA) && !crbit(BB));

===
creqv

010011 BT BA BB 0100100001 0
0      6  11 16 21         31

    crbit(BT, crbit(BA) == crbit(BB));

===
crnand

010011 BT BA BB 0011100001 0
0      6  11 16 21         31

    crbit(BT, !(crbit(BA) && crbit(BB)));

===
crnor

010011 BT BA BB 0000100001 0
0      6  11 16 21         31

    crbit(BT, !(crbit(BA) || crbit(BB)));

===
cror

010011 BT BA BB 0111000001 0
0      6  11 16 21         31

    crbit(BT, crbit(BA) || crbit(BB));

===
crorc

010011 BT BA BB 0110100001 0
0      6  11 16 21         31

    crbit(BT, crbit(BA) || !crbit(BB));

===
crxor

010011 BT BA BB 0011000001 0
0      6  11 16 21         31

    crbit(BT, crbit(BA) != crbit(BB));

===
dcba

011111 00000 RA RB 101111 E  110 0
0      6     11 16 21     27 28  31

    ;

===
dcbf

011111 00000 RA RB 000101 E  110 0
0      6     11 16 21     27 28  31

    ;

===
dcbi

011111 00000 RA RB 011101 E  110 0
0      6     11 16 21     27 28  31

===
dcbst

011111 00000 RA RB 000011 E  110 0
0      6     11 16 21     27 28  31

    ;

===
dcbt

011111 CT RA RB 010001 E  110 0
0      6  11 16 21     27 28  31

    ;

===
dcbtst

011111 CT RA RB 001111 E  110 0
0      6  11 16 21     27 28  31

    ;

===
dcbz

011111 00000 RA RB 111111 E  110 0
0      6     11 16 21     27 28  31

===
divd

011111 RT RA RB OE 111101001 Rc
0      6  11 16 21 22        31

===
divdu

011111 RT RA RB OE 111001001 Rc
0      6  11 16 21 22        31

===
divw

011111 RT RA RB OE 111101011 Rc
0      6  11 16 21 22        31

    if((r[RA] == 0x80000000 && r[RB] == 0xFFFFFFFF)
            || r[RB] == 0)
    {
        if(OE)
            SO = OV = true;
        if(Rc) record(0, 0);
    }
    else
    {
        if(OE)
            OV = false;
        int32_t val = (int32_t)r[RA] / (int32_t)r[RB];
        r[RT] = val;
        if(Rc) record(0, val);
    }

===
divwu

011111 RT RA RB OE 111001011 Rc
0      6  11 16 21 22        31

    if(r[RB] == 0)
    {
        if(OE)
            SO = OV = true;
        if(Rc) record(0, 0);
    }
    else
    {
        if(OE)
            OV = false;
        uint32_t val = r[RA] / r[RB];
        r[RT] = val;
        if(Rc) record(0, val);
    }

===
eqv

011111 RS RA RB 0100011100 Rc
0      6  11 16 21         31

    int32_t val = ~(r[RS] ^ r[RB]);
    r[RA] = val;
    if(Rc) record(0, val);
===
extsb

011111 RS RA 00000 1110111010 Rc
0      6  11 16    21         31

    int32_t val = (int8_t)r[RS];
    r[RA] = val;
    if(Rc) record(0, val);
===
extsh

011111 RS RA 00000 1110011010 Rc
0      6  11 16    21         31

    int32_t val = (int16_t)r[RS];
    r[RA] = val;
    if(Rc) record(0, val);

===
extsw

011111 RS RA 00000 1111011010 Rc
0      6  11 16    21         31

===
fabs

111111 FRT 00000 FRB 0100001000 Rc
0      6   11    16  21         31

    f[FRT] = std::abs(f[FRB]);
    if(Rc) frecord();

===
fadd

111 P 11 FRT FRA FRB 00000 10101 Rc
0   3 4  6   11  16  21    26    31

    f[FRT] = f[FRA] + f[FRB];
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===
fcfid

111111 FRT 00000 FRB 1101001110 0
0      6   11    16  21         31
===
fcmp

111111 BF 00 FRA FRB 0000 U  00000 0
0      6  9  11  16  21   25 26    31

    uint32_t cc;
    if(std::isnan(f[FRA]) || std::isnan(f[FRB]))
        cc = 1;
    else if(f[FRA] < f[FRB])
        cc = 8;
    else if(f[FRA] > f[FRB])
        cc = 4;
    else
        cc = 2;
    setcr(BF,cc);
    // ###

===
fctid

111111 FRT 00000 FRB 110010111 Z  0
0      6   11    16  21        30 31

    int64_t w = f[FRB];
    static_assert(sizeof(f[FRT]) == 8, "unexpected fpr size");
    std::memcpy(&f[FRT], &w, 8);

===
fctiw

111111 FRT 00000 FRB 000000111 Z  Rc
0      6   11    16  21        30 31

    uint64_t w = (int32_t) f[FRB];
    static_assert(sizeof(f[FRT]) == 8, "unexpected fpr size");
    std::memcpy(&f[FRT], &w, 8);
    if(Rc) frecord();

===
fdiv

111 P 11 FRT FRA FRB 00000 10010 Rc
0   3 4  6   11  16  21    26    31

    f[FRT] = f[FRA] / f[FRB];
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

fmadd
111 P 11 FRT FRA FRB FRC 11101 Rc
0   3 4  6   11  16  21  26    31

    f[FRT] = f[FRA] * f[FRC] + f[FRB];
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

fmr
111111 FRT 00000 FRB 0001001000 Rc
0      6   11    16  21         31

    f[FRT] = f[FRB];
    if(Rc) frecord();

===

fmsub
111 P 11 FRT FRA FRB FRC 11100 Rc
0   3 4  6   11  16  21  26    31

    f[FRT] = f[FRA] * f[FRC] - f[FRB];
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

fmul
111 P 11 FRT FRA 00000 FRC 11001 Rc
0   3 4  6   11  16    21  26    31

    f[FRT] = f[FRA] * f[FRC];
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

fnabs
111111 FRT 00000 FRB 0010001000 Rc
0      6   11    16  21         31

    f[FRT] = -std::abs(f[FRB]);
    if(Rc) frecord();

===

fneg
111111 FRT 00000 FRB 0000101000 Rc
0      6   11    16  21         31

    f[FRT] = -f[FRB];
    if(Rc) frecord();

===

fnmadd
111 P 11 FRT FRA FRB FRC 11111 Rc
0   3 4  6   11  16  21  26    31

    f[FRT] = -(f[FRA] * f[FRC] + f[FRB]);
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

fnmsub
111 P 11 FRT FRA FRB FRC 11110 Rc
0   3 4  6   11  16  21  26    31

    f[FRT] = -(f[FRA] * f[FRC] - f[FRB]);
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

fres
111011 FRT 00000 FRB 00000 11000 Rc
0      6   11    16  21    26    31

===

frsp
111111 FRT 00000 FRB 0000001100 Rc
0      6   11    16  21         31

    f[FRT] = (float) f[FRB];
    if(Rc) frecord();

===

frsqrte
111111 FRT 00000 FRB 00000 11010 Rc
0      6   11    16  21    26    31

===

fsel
111111 FRT FRA FRB FRC 10111 Rc
0      6   11  16  21  26    31

===

fsqrt
111 P 11 FRT 00000 FRB 00000 10110 Rc
0   3 4  6   11    16  21    26    31

===

fsub
111 P 11 FRT FRA FRB 00000 10100 Rc
0   3 4  6   11  16  21    26    31

    f[FRT] = f[FRA] - f[FRB];
    if(!P)
        f[FRT] = float(f[FRT]);
    if(Rc) frecord();

===

icbi

011111 00000 RA RB 1111010110 0
0      6     11 16 21         31

    ; // TODO: flush cache

===
icbt

011111 CT RA RB 0000010110 0
0      6  11 16 21         31

    ;

===

isync

010011 000000000000000 0010010110 0
0      6               21         31

    ;

===
lbz

10001 U RT RA D
0     5 6  11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    r[RT] = load<uint8_t>(ea);
    if(U) r[RA] = ea;

===
lbze

111010 RT RA DE 000 U
0      6  11 16 28  31

===
lbzx

011111 RT RA RB 0001 U  10111 0
0      6  11 16 21   25 26    31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = load<uint8_t>(ea);
    if(U) r[RA] = ea;

===
lbzxe

011111 RT RA RB 0001 U  11111 0
0      6  11 16 21   25 26    31

===

ldarxe
011111 RT RA RB 0111011111 0
0      6  11 16 21         31

===

lde
111110 RT RA DES 000 U
0      6  11 16  28  31

===

ldxe
011111 RT RA RB 1100 U  11111 0
0      6  11 16 21   25 26    31

===

lfd
11001 U FRT RA D
0     5 6   11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    f[FRT] = load<double>(ea);
    if(U) r[RA] = ea;

===

lfde
111110 FRT RA DES 011 U
0      6   11 16  28  31

===

lfdx
011111 FRT RA RB 1001 U  10111 0
0      6   11 16 21   25 26    31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    f[FRT] = load<double>(ea);
    if(U) r[RA] = ea;

===

lfdxe
011111 FRT RA RB 1001 U  11111 0
0      6   11 16 21   25 26    31

===

lfs
11000 U FRT RA D
0     5 6   11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    f[FRT] = load<float>(ea);
    if(U) r[RA] = ea;

===

lfse
111110 FRT RA DES 010 U
0      6   11 16  28  31

===

lfsx
011111 FRT RA RB 1000 U  10111 0
0      6   11 16 21   25 26    31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    f[FRT] = load<float>(ea);
    if(U) r[RA] = ea;

===

lfsxe
011111 FRT RA RB 1000 U  11111 0
0      6   11 16 21   25 26    31

===
lha

10101 U RT RA D
0     5 6  11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    r[RT] = (int32_t) load<int16_t>(ea);
    if(U) r[RA] = ea;

===
lhae
111010 RT RA DE 010 U
0      6  11 16 28  31

===
lhax

011111 RT RA RB 0101 U  10111 0
0      6  11 16 21   25 26    31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = (int32_t) load<int16_t>(ea);
    if(U) r[RA] = ea;

===
lhaxe

011111 RT RA RB 0101 U  11111 0
0      6  11 16 21   25 26    31

===
lhbrx

011111 RT RA RB 1100010110 0
0      6  11 16 21         31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = swap16( load<uint16_t>(ea) );

===
lhbrxe

011111 RT RA RB 1100011110 0
0      6  11 16 21         31


===
lhz

10100 U RT RA D
0     5 6  11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    r[RT] = load<uint16_t>(ea);
    if(U) r[RA] = ea;
===
lhze
111010 RT RA DE 001 U
0      6  11 16 28  31

===
lhzx

011111 RT RA RB 0100 U  10111 0
0      6  11 16 21   25 26    31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = load<uint16_t>(ea);
    if(U) r[RA] = ea;

===
lhzxe

011111 RT RA RB 0100 U  11111 0
0      6  11 16 21   25 26    31

===
lmw
101110 RT RA D
0      6  11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    while(RT <= 31)
    {
        r[RT++] = load<uint32_t>(ea);
        ea += 4;
    }

===
lswi
011111 RT RA NB 1001010101 0
0      6  11 16 21         31

expand RA

    uint32_t ea = RA ? r[RA] : 0;
    int n = NB == 0 ? 32 : NB;
    uint32_t shift = 24;
    int reg = RT-1;
    for(int i = 0; i < n; i++)
    {
        if(shift == 24)
        {
            reg = (reg+1) % 32;
            r[reg] = 0;
        }
        r[reg] |= load<uint8_t>(ea++) << shift;

        if(shift)
            shift -= 8;
        else
            shift = 24;
    }

===
lswx
011111 RT RA RB 1000010101 0
0      6  11 16 21         31

===
lwarx
011111 RT RA RB 0000010100 0
0      6  11 16 21         31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = load<uint32_t>(ea);
    setcr(0, 0x2 | (getcr(0) & 1) );
    // FIXME: for now, everything is single-threaded

===
lwarxe
011111 RT RA RB 0001111110 0
0      6  11 16 21         31


===
lwbrx

011111 RT RA RB 1000010110 0
0      6  11 16 21         31

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = swap32( load<uint32_t>(ea) );
===
lwbrxe

011111 RT RA RB 1000011110 0
0      6  11 16 21         31

===
lwz

10000 U RT RA D
0     5 6  11 16

expand RA

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    r[RT] = load<uint32_t>(ea);
    if(U) r[RA] = ea;

===
lwze

111010 RT RA DE 011 U
0      6  11 16 28  31

===
lwzx

011111 RT RA RB 0000 U  10111 0
0      6  11 16 21   25 26    31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    r[RT] = load<uint32_t>(ea);
    if(U) r[RA] = ea;

===
lwzxe

011111 RT RA RB 0000 U  11111 0
0      6  11 16 21   25 26    31

===
mbar

011111 MO 0000000000 1101010110 0
0      6  11         21         31

    ;

===
mcrf

010011 BF 00 BFA 0000000 0000000000 0
0      6  9  11  14      21         31

    setcr(BF, getcr(BFA));

===

mcrfs

111111 BF 00 BFA 0000000 0001000000 0
0      6  9  11  14      21         31

===

mcrxr

011111 BF 000000000000 1000000000 0
0      6  9            21         31

===

mcrxr64

011111 BF 000000000000 1000100000 0
0      6  9            21         31

===

mfapidi
011111 RT RA 00000 0100010011 0
0      6  11 16    21         31


===
mfcr

011111 RT 0000000000 0000010011 0
0      6  11         21         31

    r[RT] = cr;

===
mfdcr

011111 RT dcrn 0101000011 0
0      6  11   21         31

===
mffs
111111 FRT 0000000000 1001000111 Rc
0      6   11         21         31

    uint64_t ffs = getfpscr();
    std::memcpy(&f[FRT], &ffs, 8);

===
mfmsr
011111 RT 0000000000 0001010011 0
0      6  11         21         31

===
mflr

011111 RT 01000 00000 0101010011 0
0      6  11    16    21         31

    r[RT] = lr;

===
mfctr

011111 RT 01001 00000 0101010011 0
0      6  11    16    21         31

    r[RT] = ctr;

===
mfspr

011111 RT sprn 0101010011 0
0      6  11   21         31

===
msync

011111 000000000000000 1001010110 0
0      6               21         31

    ;

===
mtcrf

011111 RS 0  FXM 0  0010010000 0
0      6  11 12  20 21         31

    for(int i = 0; i < 8; i++)
        if(FXM & (1>>i))
            setcr(i, (r[RS] >> (7-i) * 4) & 0xF);

===
mtdcr

011111 RS dcrn 0111000011 0
0      6  11   21         31

===
mtfsb0
111111 BR 0000000000 0001000110 Rc
0      6  11         21         31

===
mtfsb1
111111 BR 0000000000 0000100110 Rc
0      6  11         21         31

===
mrfsf
111111 0 FLM 0  FRB 1011000111 Rc
0      6 7   15 16  21         31

===
mtfsfi
111111 BF 0000000 U  0  0010000110 Rc
0      6  9       16 20 21         31

===
mtmsr
011111 RS 0000000000 0010010010 0
0      6  11         21         31

===
mtlr

011111 RS 01000 00000 0111010011 0
0      6  11    16    21         31

    lr = r[RS];

===
mtctr

011111 RS 01001 00000 0111010011 0
0      6  11    16    21         31

    ctr = r[RS];

===
mtspr

011111 RS sprn 0111010011 0
0      6  11   21         31

===
mulhd

011111 RT RA RB 0  001001001 Rc
0      6  11 16 21 22        31
===
mulhdu

011111 RT RA RB 0  000001001 Rc
0      6  11 16 21 22        31

===
mulhw

011111 RT RA RB 0  001001011 Rc
0      6  11 16 21 22        31

    int64_t prod = (int64_t)(int32_t)r[RA] * (int64_t)(int32_t)r[RB];
    if(Rc) record(0, prod >> 32);
    r[RT] = prod >> 32;

===
mulhwu

011111 RT RA RB 0  000001011 Rc
0      6  11 16 21 22        31

    uint64_t prod = (uint64_t)r[RA] * (uint64_t)r[RB];
    if(Rc) record(0, (int64_t)prod >> 32);
    r[RT] = prod >> 32;

===
mulld
011111 RT RA RB OE 011101001 0
0      6  11 16 21 22        31

===
mulli

000111 RT RA SI
0      6  11 16

    r[RT] = r[RA] * (int16_t)SI;

===
mullw

011111 RT RA RB OE 011101011 Rc
0      6  11 16 21 22        31

    int64_t prod = (int64_t)(int32_t)r[RA] * (int64_t)(int32_t)r[RB];
    if(OE)
    {
        OV = (prod & 0xFFFFFFFF80000000) != 0
          && (prod & 0xFFFFFFFF80000000) != 0xFFFFFFFF80000000;
        SO = SO || OV;
    }
    if(Rc) record(0,prod);
    r[RT] = prod;

===

nand

011111 RS RA RB 0111011100 Rc
0      6  11 16 21         31

    uint32_t val = ~(r[RS] & r[RB]);
    r[RA] = val;
    if(Rc) record(0,val);

===

neg

011111 RT RA 00000 OE 001101000 Rc
0      6  11 16    21 22        31

    uint32_t val = ~r[RA] + 1;
    if(OE)
    {
        OV = val == 0x80000000;
        SO = SO || OV;
    }
    if(Rc) record(0,val);
    r[RT] = val;

===

nor

011111 RS RA RB 0001111100 Rc
0      6  11 16 21         31

    uint32_t val = ~(r[RS] | r[RB]);
    r[RA] = val;
    if(Rc) record(0,val);

===

or

011111 RS RA RB 0110111100 Rc
0      6  11 16 21         31

    uint32_t val = r[RS] | r[RB];
    r[RA] = val;
    if(Rc) record(0,val);

===

orc

011111 RS RA RB 0110011100 Rc
0      6  11 16 21         31

    uint32_t val = r[RS] | ~r[RB];
    r[RA] = val;
    if(Rc) record(0,val);

===

ori

01100 S RS RA UI
0     5 6  11 16

    uint32_t val = r[RS] | (UI << (S ? 16 : 0));
    r[RA] = val;

===

rfci
010011 000000000000000 0000110011 0
0      6               21         31

===

rfi
010011 000000000000000 0000110010 0
0      6               21         31

===

rldcl
011110 RS RA RB mb mb0 1000 0
0      6  11 16 21 26  27   31

===

rldicl
011110 RS RA sh mb mb0 000 sh0 0
0      6  11 16 21 26  27  30  31

===

rldcr
011110 RS RA RB mb mb0 1001 0
0      6  11 16 21 26  27   31

===

rldicr
011110 RS RA sh mb mb0 001 sh0 0
0      6  11 16 21 26  27  30  31

===

rldic
011110 RS RA sh mb mb0 010 sh0 0
0      6  11 16 21 26  27  30  31


===

rldimi

011110 RS RA sh mb mb0 011 sh0 0
0      6  11 16 21 26  27  30  31

===

rlwimi

010100 RS RA SH MB ME Rc
0      6  11 16 21 26 31

    uint32_t in = r[RS];
    uint32_t rot = SH ? (in << SH) | (in >> (32-SH)) : in;
    uint32_t mask = 0xFFFFFFFFU >> MB;
    if(ME < MB)
        mask |= 0xFFFFFFFFU << (31-ME);
    else
        mask &= 0xFFFFFFFFU << (31-ME);
    uint32_t result = (rot & mask) | (r[RA] & ~mask);
    r[RA] = result;
    if(Rc) record(0,result);

===

rlwnm

0101 NOT_I 1 RS RA SH MB ME Rc
0    4     5 6  11 16 21 26 31

    uint32_t n = (NOT_I ? r[SH] : SH) & 31;
    uint32_t in = r[RS];
    uint32_t rot = n ? (in << n) | (in >> (32-n)) : in;
    uint32_t mask = 0xFFFFFFFFU >> MB;
    if(ME < MB)
        mask |= 0xFFFFFFFFU << (31-ME);
    else
        mask &= 0xFFFFFFFFU << (31-ME);
    uint32_t result = rot & mask;
    if(Rc) record(0,result);
    r[RA] = result;

===

sc
010001 000000000000000000000000 1  0
0      6                        30 31

branch

    NIA = syscall(*this);

===

sld

011111 RS RA RB 0000011011 0
0      6  11 16 21         31

===

slw

011111 RS RA RB 0000011000 Rc
0      6  11 16 21         31

    uint32_t n = r[RB] & 0x3F;
    uint32_t result;
    if(n & 0x20)
        result = 0;
    else
        result = r[RS] << n;
    if(Rc) record(0,result);
    r[RA] = result;

===

srad
011111 RS RA RB 1100011010 0
0      6  11 16 21         31

===

sradi
011111 RS RA sh 110011101 sh0 0
0      6  11 16 21        30  31

===

sraw

011111 RS RA SH 1100 I  11000 Rc
0      6  11 16 21   25 26    31

    uint32_t n = I ? SH : (r[SH] & 0x3F);
    uint32_t result;
    int32_t s = r[RS];
    if(n & 0x20)
    {
        CA = s < 0;
        if(s < 0)
        {
            result = 0xFFFFFFFF;
        }
        else
        {
            result = 0;
        }
    }
    else
    {
        CA = (s < 0) && (((1 << n) - 1) & s) != 0;
        result = s >> (int32_t)n;
    }

    if(Rc) record(0,result);
    r[RA] = result;

===

srd

011111 RS RA RB 1000011011 0
0      6  11 16 21         31

===

srw

011111 RS RA RB 1000011000 Rc
0      6  11 16 21         31

    uint32_t n = r[RB] & 0x3F;
    uint32_t result;
    uint32_t s = r[RS];
    if(n & 0x20)
        result = 0;
    else
        result = s >> n;

    if(Rc) record(0,result);
    r[RA] = result;


===

stb

10011 U RS RA D
0     5 6  11 16

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    store<uint8_t>(ea, r[RS]);
    if(U) r[RA] = ea;

===

stbe
111010 RS RA DE 100 U
0      6  11 16 28  31

===
stbx

011111 RS RA RB 0011 U  10111 0
0      6  11 16 21   25 26    31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<uint8_t>(ea, r[RS]);
    if(U) r[RA] = ea;

===
stbxe

011111 RS RA RB 0011 U  11111 0
0      6  11 16 21   25 26    31

===
stdcxe
011111 RS RA RB 0111111111 1
0      6  11 16 21         31

===
stde
111110 RS RA DES 100 U
0      6  11 16  28  31

===
stdxe
011111 RS RA RB 1110 U  11111 0
0      6  11 16 21   25 26    31

===
stfd
11011 U FRS RA D
0     5 6   11 16

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    store<double>(ea, f[FRS]);
    if(U) r[RA] = ea;

===
stfde
111110 FRS RA DES 111 U
0      6   11 16  28  31

===
stfdx
011111 FRS RA RB 1011 U  10111 0
0      6   11 16 21   25 26    31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<double>(ea, f[FRS]);
    if(U) r[RA] = ea;

===
stfdxe
011111 FRS RA RB 1011 U  11111 0
0      6   11 16 21   25 26    31

===

stfiwx
011111 FRS RA RB 1111010111 0
0      6   11 16 21         31

===

stfiwxe
011111 FRS RA RB 1111011111 0
0      6   11 16 21         31

===
stfs
11010 U FRS RA D
0     5 6   11 16

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    store<float>(ea, f[FRS]);
    if(U) r[RA] = ea;

===
stfse
111110 FRS RA DES 110 U
0      6   11 16  28  31

===
stfsx
011111 FRS RA RB 1010 U  10111 0
0      6   11 16 21   25 26    31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<float>(ea, f[FRS]);
    if(U) r[RA] = ea;

===
stfsxe
011111 FRS RA RB 1010 U  11111 0
0      6   11 16 21   25 26    31

===
sth

10110 U RS RA D
0     5 6  11 16

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    store<uint16_t>(ea, r[RS]);
    if(U) r[RA] = ea;

===
sthe

111010 RS RA DE 101 U
0      6  11 16 28  31

===
sthx

011111 RS RA RB 0110 U  10111 0
0      6  11 16 21   25 26    31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<uint16_t>(ea, r[RS]);
    if(U) r[RA] = ea;

===
sthxe

011111 RS RA RB 0110 U  11111 0
0      6  11 16 21   25 26    31

===
sthbrx

011111 RS RA RB 1110010110 0
0      6  11 16 21         31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<uint16_t>(ea, swap16(r[RS]));

===
sthbrxe

011111 RS RA RB 1110011110 0
0      6  11 16 21         31

===
stmw
101111 RS RA D
0      6  11 16

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    while(RS <= 31)
    {
        store<uint32_t>(ea, r[RS++]);
        ea += 4;
    }

===
stswi
011111 RS RA NB 1011010101 0
0      6  11 16 21         31

    uint32_t ea = RA ? r[RA] : 0;
    int n = NB == 0 ? 32 : NB;
    int shift = 24;
    for(int i = 0; i < n; i++)
    {
        store<uint8_t>(ea + i, r[RS] >> shift);

        shift -= 8;
        if(shift < 0)
        {
            shift = 24;
            RS = (RS+1) % 32;
        }
    }

===
stswx
011111 RS RA RB 1010010101 0
0      6  11 16 21         31

===
stw

10010 U RS RA D
0     5 6  11 16

    uint32_t ea = (RA ? r[RA] : 0) + (int16_t)D;
    store<uint32_t>(ea, r[RS]);
    if(U) r[RA] = ea;

===
stwe

111010 RS RA DE 111 U
0      6  11 16 28  31

===
stwx

011111 RS RA RB 0010 U  10111 0
0      6  11 16 21   25 26    31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<uint32_t>(ea, r[RS]);
    if(U) r[RA] = ea;

===
stwxe

011111 RS RA RB 0010 U  11111 0
0      6  11 16 21   25 26    31

===
stwbrx

011111 RS RA RB 1010010110 0
0      6  11 16 21         31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<uint32_t>(ea, swap32(r[RS]));

===
stwbrxe

011111 RS RA RB 1010011110 0
0      6  11 16 21         31

===
stwcx
011111 RS RA RB 0010010110 1
0      6  11 16 21         31

    uint32_t ea = (RA ? r[RA] : 0) + r[RB];
    store<uint32_t>(ea, r[RS]);

    // FIXME: for now, everything is single-threaded

===
stwcxe
011111 RS RA RB 0010011110 1
0      6  11 16 21         31

===

subf

011111 RT RA RB OE 000101000 Rc
0      6  11 16 21 22        31

    int64_t val = (int64_t)(int32_t)~r[RA] + (int64_t)(int32_t)r[RB] + 1;
    r[RT] = val;
    if(OE) overflow(val);
    if(Rc) record(0,val);
  
===

subfc

011111 RT RA RB OE 000001000 Rc
0      6  11 16 21 22        31

    int64_t sval = (int64_t)(int32_t)~r[RA] + (int64_t)(int32_t)r[RB] + 1;
    uint64_t val = (uint64_t)~r[RA] + (uint64_t)r[RB] + 1;
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;

===

subfe

011111 RT RA RB OE 010001000 Rc
0      6  11 16 21 22        31

    int64_t sval = (int64_t)(int32_t)~r[RA] + (int64_t)(int32_t)r[RB] + (CA ? 1 : 0);
    uint64_t val = (uint64_t)~r[RA] + (uint64_t)r[RB] + (CA ? 1 : 0);
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;

===

subfe64

011111 RT RA RB OE 110001000 Rc
0      6  11 16 21 22        31

===

subfic

001000 RT RA SI
0      6  11 16

    uint64_t val = (uint64_t)~r[RA] + (uint32_t)(int16_t)SI + 1;
    CA = (val >> 32) & 1;
    r[RT] = val;

===

subfme

011111 RT RA 00000 OE 011101000 Rc
0      6  11 16    21 22        31

    int64_t sval = (int64_t)(int32_t)~r[RA] + (int64_t)-1 + (CA ? 1 : 0);
    uint64_t val = (uint64_t)~r[RA] + 0xFFFFFFFFU + (CA ? 1 : 0);
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;

===

subfme64

011111 RT RA 00000 OE 111101000 Rc
0      6  11 16    21 22        31

===

subfze

011111 RT RA 00000 OE 011001000 Rc
0      6  11 16    21 22        31

    int64_t sval = (int64_t)(int32_t)~r[RA] + (CA ? 1 : 0);
    uint64_t val = (uint64_t)~r[RA] + (CA ? 1 : 0);
    r[RT] = val;
    if(OE) overflow(sval);
    if(Rc) record(0,val);
    CA = (val >> 32) & 1;

===

subfze64

011111 RT RA 00000 OE 111001010 Rc
0      6  11 16    21 22        31

===

sync

011111 0000 1  0000000000 1001010110 0
0      6    10 11         21         31

    ;

===

td
011111 TO RA RB 0001000100 0
0      6  11 16 21         31

===

tdi
000010 TO RA SI
0      6  11 16

===
tlbivax
011111 00000 RA RB 110001001 E  0
0      6     11 16 21        30 31

===
tlbre
011111 TLB 1110110010 0
0      6   21         31

===
tlbsx
011111 TLB RA RB 111001001 E  TLB1
0      6   11 16 21        30 31

===
tlbsync
011111 000000000000000 100110110 0
0      6               21        31

===
tlbwe
011111 TLB 1111010010 0
0      6   21         31

===
tw
011111 TO RA RB 0000000100 0
0      6  11 17 21         31

    /* Hack: just ignore 'trap word' for now */;

===
twi
000011 TO RA SI
0      6  11 16

    /* Hack: just ignore 'trap word immediate' for now */;

===
wrtee
011111 RS 0000000000 0010000011 0
0      6  11         21         31

===
wrteei
011111 0000000000 E  0000 0010100011 0
0      6          16 17   21         31

===

xor

011111 RS RA RB 0100111100 Rc
0      6  11 16 21         31

    uint32_t val = r[RS] ^ r[RB];
    r[RA] = val;
    if(Rc) record(0,val);

===

xori

01101 S RS RA UI
0     5 6  11 16

    uint32_t val = r[RS] ^ (UI << (S ? 16 : 0));
    r[RA] = val;

===

emulop

00011000000000000000000000000000
0

    return;


===

